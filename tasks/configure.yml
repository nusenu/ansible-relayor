---

- name: Ensure local DataDir folders exist (LOCAL)
  file: path={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}
    state=directory mode=700
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - createdir

- name: Ensure all relay keys exist (LOCAL)
  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}" --Log "err stdout"
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Generate new Ed25519 signing keys (LOCAL)
  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\ days --datadirectory "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}" --Log "err stdout"
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - renewkey

- name: Detect duplicate relay keys across relays (LOCAL)
  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l
  delegate_to: 127.0.0.1
  register: dupcount

- name: Abort on duplicate relay keys
  fail: msg="Duplicate relay key detected! Aborting."
  when: dupcount.stdout != "0"

- name: Detect if Ed25519 master keys are on the relay
  stat: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key
  become: yes
  register: masterkeycheck
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Abort if Ed25519 master keys are on the relay
  fail: msg="

            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting."
  when: item.stat.exists == True
  with_items: "{{ masterkeycheck.results }}"

- name: Collect fingerprints for MyFamily (LOCAL)
  shell: cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d" " -f2|xargs|sed -e 's/ /,/g'
  delegate_to: 127.0.0.1
  register: family
  tags:
   - reconfigure

- name: Ensure per-instance tor users exist
  become: yes
  user: name=_tor-{{ item.0.ipv4 }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure per-instance config folders exist (Debian only)
  become: yes
  file: path={{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }} state=directory mode=755
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  when: ansible_pkg_mgr == 'apt'

- name: Ensure DataDir exists
  become: yes
  file: path={{ tor_DataDir }}
    state=directory
    owner=root
    mode=0755

- name: Ensure "keys" subfolder exists
  become: yes
  file: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys
    state=directory
    owner="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    group="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode=0700
    recurse=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure RSA key is in place (without overriding existing keys)
  become: yes
  copy: src={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}
   owner="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
   mode=700 force=no
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Fetch RSA key for comparision
  become: yes
  fetch: src={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}
    dest={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey
    flat=yes
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Compare local vs. remote RSA key (secret_id_key)
  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-"{{ item.0.ipv4 }}_{{ item.1.orport }}"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: rsakey

- name: Abort if local and remote RSA keys do not match
  fail: 'msg="


   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.

   We detected that the remote host uses an RSA key that was not generated by us.
   We will not override it with our locally generated key.

   If you want to make use of the remote RSA key you have to override the local key manually:


   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys

   mv secret_id_key.untrustedremotekey secret_id_key"'
  when: item.stdout != "1"
  with_items: "{{ rsakey.results }}"

# this task is separated from the task named "Ensure RSA key is in place" because it is not run with 'force=no'
- name: Transmit new Ed25519 signing keys
  become: yes
  copy: src={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}
   dest={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}
   owner="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
   mode=700
   setype=tor_var_lib_t
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]
  tags:
   - renewkey

# This needs to be at the end to fix SELinux contexts recursively
- name: Ensure per-instance DataDir have proper permissions
  become: yes
  file: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}
    state=directory
    owner="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    group="_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode=0700
    recurse=yes
    setype=tor_var_lib_t
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure Tor config directory exists
  become: yes
  file: path={{ tor_ConfDir }}
    state=directory
    owner=root
    group={{ tor_user }}
    mode=755

- name: Ensure tor-exit-notice.html is present (if we are an exit)
  become: yes
  template: src=tor-exit-notice.html dest={{ tor_ConfDir }}/tor-exit-notice.html mode=444
  when: tor_ExitRelay == True and tor_ExitNoticePage == True

- name: Generating torrc file(s)
  become: yes
  template: >
    src=torrc
    dest="{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}"
    owner=root
    mode=0644
    backup=yes
    validate="tor --verify-config -f %s"
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: instances
  tags:
   - reconfigure
