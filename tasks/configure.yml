---

- name: Ensure local DataDir folders exist (LOCAL)
  become: false
  file:
    path: "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    state: directory
    mode: 0700
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - createdir

- name: Ensure all relay keys exist (LOCAL)
  become: false
  command: >
          "{{ tor_binary }}" --list-fingerprint --DisableNetwork 1 --orport auto --PublishServerDescriptor 0 --ExitRelay 0
          --ignore-missing-torrc -f /dev/null --defaults-torrc /dev/null --Log "err stdout"
          --datadirectory "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}"
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  changed_when: false

- name: Generate new Ed25519 signing keys (LOCAL)
  become: false
  command: >
        "{{ tor_binary }}" --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days }}\ days --ignore-missing-torrc -f /dev/null
        --defaults-torrc /dev/null --Log "err stdout"
        --datadirectory "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}"
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  tags:
   - renewkey
  changed_when: false

- name: Detect duplicate relay keys across relays (LOCAL)
  become: false
  shell: >
        set -o pipefail && openssl sha256 -r
        {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key |
        cut -d' ' -f1|sort|uniq -d|wc -l
  args:
    executable: /bin/bash
  delegate_to: 127.0.0.1
  run_once: true
  register: tor_dupkeycount
  changed_when: false

- name: Abort on duplicate relay keys
  fail:
    msg: "Duplicate relay key detected! Aborting."
  run_once: true
  when: tor_dupkeycount.stdout|int(1) != 0

- name: Detect if Ed25519 master keys are on the relay
  become: true
  stat:
    path: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key"
  register: tor_masterkeyonline
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Abort if Ed25519 master keys are on the relay
  fail:
    msg: "Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting."
  when: item.stat.exists
  with_items: "{{ tor_masterkeyonline.results }}"

# not relying on the datadir/fingerprint file is more robust
- name: Collect fingerprints for MyFamily (LOCAL)
  become: false
  shell: >
        set -o pipefail && for key in {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key;
            do openssl rsa -in $key -outform DER -RSAPublicKey_out 2> /dev/null| openssl sha1 -r;
        done|cut -d" " -f1|sort|xargs|sed -e 's/ /,/g'
  args:
    executable: /bin/bash
  delegate_to: 127.0.0.1
  run_once: true
  register: tor_family
  tags:
   - reconfigure
  changed_when: false

- name: Ensure per-instance tor users exist
  become: true
  user:
    name: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    system: true
    shell: /bin/false
    create_home: true
    home: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}"
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

# We only need to create this folder (used for ControlSocket and on FreeBSD for the pidfile) on:
# - FreeBSD (regardless of tor_enableControlSocket)
# - CentOS/Fedora/OpenBSD when tor_enableControlSocket is True
# we never create it on Debian since the systemd service file creates it there (with different permissions)
- name: Ensure PID/ControlSocket directory exists
  become: true
  file:
    path: "{{ tor_PidDir }}"
    state: directory
    owner: root
    mode: 0755
  when: ansible_system == 'FreeBSD' or (tor_enableControlSocket and (ansible_system == 'OpenBSD' or ansible_os_family == 'RedHat'))

- name: Ensure PID/ControlSocket directory is owned by per-instance tor user
  become: true
  file:
    path: "{{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}"
    state: directory
    owner: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    group: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode: 0750
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  when: ansible_system == 'FreeBSD' or (tor_enableControlSocket and (ansible_system == 'OpenBSD' or ansible_os_family == 'RedHat'))

- name: Ensure per-instance config folders exist (Debian only)
  become: true
  file:
    path: "{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}"
    state: directory
    mode: 0755
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  when: ansible_pkg_mgr == 'apt'

- name: Ensure DataDir exists
  become: true
  file:
    path: "{{ tor_DataDir }}"
    state: directory
    owner: root
    mode: 0755

- name: Ensure "keys" subfolder exists
  become: true
  file:
    path: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys"
    state: directory
    owner: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    group: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode: u=rwX,g=,o=
    recurse: true
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure RSA key is in place (without overriding existing keys)
  become: true
  copy:
    src: "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}"
    dest: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}"
    owner: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode: 0600
    force: false
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Fetch RSA key for comparison
  become: true
  fetch:
    src: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}"
    dest: "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey"
    flat: true
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'secret_id_key' ]

- name: Compare local vs. remote RSA key (secret_id_key)
  become: false
  shell: >
        set -o pipefail && openssl sha256 -r
        {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-"{{ item.0.ipv4 }}_{{ item.1.orport }}"/keys/secret_id_key*
        | cut -d' ' -f1|uniq -d|wc -l
  args:
    executable: /bin/bash
  delegate_to: 127.0.0.1
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: tor_rsakey_match
  changed_when: false

- name: Abort if local and remote RSA keys do not match
  assert:
    that:
      - "item.stdout|int == 1"
    msg: >
         "Key mismatch detected! Solution: http://bit.ly/2j6wc70 Affected instance:
         {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}/keys"
  with_items: "{{ tor_rsakey_match.results }}"

# this task is separated from the task named "Ensure RSA key is in place" because it is not run with 'force=no'
- name: Transmit new Ed25519 signing keys
  become: true
  copy:
    src: "{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}"
    dest: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}"
    owner: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode: 0600
    setype: tor_var_lib_t
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]
  changed_when: false
  tags:
   - renewkey

# This needs to be at the end to fix SELinux contexts recursively
- name: Ensure per-instance DataDir have proper permissions
  become: true
  file:
    path: "{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}"
    state: directory
    owner: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    group: "_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}"
    mode: u=rwX,g=,o=
    recurse: true
    setype: tor_var_lib_t
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"

- name: Ensure Tor config directory exists
  become: true
  file:
    path: "{{ tor_ConfDir }}"
    state: directory
    owner: root
    group: "{{ tor_user }}"
    mode: 0755

- name: Ensure tor-exit-notice.html is present (if we are an exit)
  become: true
  template:
    src: "{{ tor_exit_notice_file }}"
    dest: "{{ tor_ConfDir }}/tor-exit-notice.html"
    mode: 0444
  when: tor_ExitRelay and tor_ExitNoticePage
  notify:
    - Ensure Tor instances are reloaded if tor-exit-notice.html changed (FreeBSD)
    - Ensure Tor instances are reloaded if tor-exit-notice.html changed (Linux)
    - Ensure Tor instances are reloaded if tor-exit-notice.html changed (OpenBSD)

- name: Ensure torrc configuration file(s) are in place
  become: true
  template:
    src: torrc
    dest: "{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport\
         ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}"
    owner: root
    mode: 0644
    backup: "{{ tor_backup_torrc }}"
    validate: "tor --verify-config -f %s"
  with_nested:
   - "{{ tor_ips }}"
   - "{{ tor_ports }}"
  register: tor_instances_tmp
  loop_control:
    index_var: loop_idx
  notify:
    - Ensure Tor instances are restarted if its torrc changed (FreeBSD)
    - Ensure Tor instances are restarted if its torrc changed (Linux)
    - Ensure Tor instances are restarted if its torrc changed (OpenBSD)
  tags:
   - reconfigure

- name: Ensure prometheus per host scrape configs are in place
  become: true
  template:
    src: prometheus-scrape-configs
    dest: "{{ tor_prometheus_confd_folder}}/{{ tor_prometheus_scrape_file }}"
    owner: root
    group: "{{ tor_prometheus_group }}"
    mode: 0640
  delegate_to: "{{ tor_prometheus_host }}"
  when: (tor_enableMetricsPort or tor_blackbox_exporter_host is defined) and tor_prometheus_host is defined
  notify:
    - assemble prometheus configuration
    - reload prometheus
  tags:
   - reconfigure
   - promconfig

- name: Ensure prometheus alert rules are in place
  become: true
  template:
    src: prometheus-alert-rules
    dest: "{{ tor_prometheus_rules_file }}"
    owner: root
    group: "{{ tor_prometheus_group }}"
    mode: 0640
    validate: promtool check rules %s
  delegate_to: "{{ tor_prometheus_host }}"
  run_once: true
  when: tor_enableMetricsPort and tor_gen_prometheus_alert_rules and tor_prometheus_rules_file is defined and tor_prometheus_host is defined
  notify:
    - reload prometheus
  tags:
   - reconfigure
   - promconfig

- name: Ensure nginx reverse proxy configuration for MetricsPort is in place
  become: true
  template:
    src: nginx-reverse-proxy-for-metricsport
    dest: "{{ tor_metricsport_nginx_config_file }}"
    mode: 0644
    owner: root
  when: tor_enableMetricsPort and tor_prometheus_host is defined
  notify:
    - reload nginx
  tags:
   - reconfigure
   - promconfig

# The htpasswd ansible module requires python passlib to be on the remote host
- name: Ensure htpasswd Ansible dependencies are installed
  become: true
  package:
    name: "{{ tor_htpasswd_dependency }}"
    state: present
  when: tor_gen_metricsport_htpasswd and tor_enableMetricsPort

- name: Ensure htpasswd file for MetricsPort protection is in place
  become: true
  htpasswd:
    create: true
    path: "{{ tor_metricsport_htpasswd_file }}"
    name: "{{ tor_metricsport_user }}"
    password: "{{ lookup('password', tor_prometheus_scrape_password_folder+inventory_hostname ) }}"
    mode: 0640
    group: "{{ tor_metricsport_htpasswd_file_owner }}"
  when: tor_gen_metricsport_htpasswd and tor_enableMetricsPort
  tags:
   - reconfigure
   - promconfig
